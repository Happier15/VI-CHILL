const socket= io('') ;
var vidgrid= document.getElementById("vid-grid") ; // Element of page where all the video streams will be added
// initializing peerjs 
var mpeer= new Peer(undefined, {
    path : '/peerjs' ,
    host: '/' ,
    port: 3030
}) 

alert("Though you can join same room again in another tab, but it is still advisable to not join the same room to avoid technical problems and for smooth performance:)");

var name ; // this will store the username of participant

// while loop to ensure that no one can join with name as null or empty string
while(true)
{
    var tname= prompt("Please tell your name","");  // getting the name of user so that it can be used in chat
    if(tname===null || tname==="")
    alert("Sorry!! you cannot come without name") ;
    else {
        name = tname ; break ;
    } 
}

var text= $('input') ;  // text written in chat by user

// jquery function to send the message to all the peers when enter is pressed on keyboard
$('html').keydown((e)=> {
        if(e.which==13 && text.val().length!==0) {   // 13 is used because numeric value for enter is 13 and also checked that something is written in chat
            socket.emit('message', text.val(), name) ;
            text.val('')  // resetting the text typed to blank
        }
})

// send message by send button
const sendmsg=()=> {
    if(text.val().length!==0) {  
        socket.emit('message', text.val(), name) ;
        text.val('')  // resetting the text typed to blank
    }
}
  
// adding the message on chat window with the name of sender
 socket.on('createmsg', (msg,name)=> {
        $('ul').append(`<li class="message"><b>${name}</b><br/>${msg}</li>`)
        scrollbottom() ;  // to scroll till last msg in chat window
    })
    
// function to scroll the chat window till bottom every time a message is added 
const scrollbottom=() => {
    let d= $('.chat_window') ;
    d.scrollTop(d.prop("scrollHeight")) ;
}
 
var myuserid ; // Self userid generated by Peerjs
var video_meet= false ; // Variable that will store if self user is currently present in video meeting
const peers= {}  // Dictionary to save the call with a remote user
var num_users=0 ; // This variable will save the number of participants present in video meeting at any time
var a=true ; var v=true ;  // setting audio and video true for initial stream
let mycalls= new Array() ; // This array will save all the calls that the user is attending
let myvidstr ;  // self video stream that will be sent to all peers

// when a new peer connection is eastablished
mpeer.on('open', id => {
    myuserid=id ; // self user id will be saved
   socket.emit('join-room', Room_id, id, name) ;  // everyone in the room will be notified
})

 // Function will be called when a new user join the room
socket.on('user-connected', (userId, username) => {
    // It will be added in the chat that username has joined room
    $('ul').append(`<li class="message"><b>${username} joined this room. WELCOME ${username}!! :)</b><br/></li>`)
})

socket.on('user-connected-video', (userId, username) => {
    $('ul').append(`<li class="message"><b>${username} joined video meeting :) :) :)</b><br/></li>`)
    // Now if self user is also present in the meeting then he will call the remote user
    if(video_meet)
    connectNewuser(userId, myvidstr) ; // calling the function to exchange streams with new user
})

// To remove the user when he is disconnected
socket.on('user-disconnected', (userId, username) => {
    $('ul').append(`<li class="message"><b>${username} left room :(</b><br/></li>`)
    if (peers[userId]) peers[userId].close() //if he had not closed the call before leaving then it will be closed now
  })
  
// When received the message that a user has left the video meet
socket.on('user-left-video', (userId, username) => {
    // It will be added in the chat that username has left meeting
    $('ul').append(`<li class="message"><b>${username} left video meeting :(</b><br/></li>`)
    if (peers[userId]) peers[userId].close()  // his call will be closed
  })
  
// Here the new user is called with own stream , and received his stream in the answer then we can add his stream on our page
function connectNewuser(userid , stream){
    num_users++ ;
    // first we connect to the peer
    var conn = mpeer.conn('userid');
    conn.on('open', function(){
      conn.send(String(myuserid)); //we can send some data to that user
    });
    const vide= document.createElement('video')  ;
    const call= mpeer.call(userid,myvidstr) ;  // calling new user with own stream and received his answer
    // adding video stream received in answer
    call.on('stream', userVideoStream => {
        addvid(vide, userVideoStream) // adding his stream in own window
    }) ;

    peers[userid] = call  // saving the call with user
    mycalls.push(call) ;  // adding call in array of calls
    // close function will be called when remote user close the call
    call.on('close', () => { 
        num_users-- ;    // number of participants in video meet decreased
        vide.remove() ; //  video of user removed
        adjust_videos() ;
      })   
}

// User called by a user that was already present in meeting.
// Call contains remote user's video stream. Here we will add his stream and answer the call with own stream
mpeer.on('call', call => {
    num_users++ ; // number of participants in video meet increased
    navigator.mediaDevices.getUserMedia({
        video:v ,
        audio:a
    }).then(stream=> {
        
        peers[call.peer] = call ;
        mycalls.push(call) ; 
        call.answer(myvidstr) ;  // Answer the call with own A/V stream.
        const vide= document.createElement('video')  ;
        call.on('stream', remoteStream => {
        addvid(vide, remoteStream)   // adding the stream that the new user send with call
    });
    
     call.on('close', () => {
        num_users-- ; 
        vide.remove() ; 
        adjust_videos() ; 
      })
    })
});

// Video element for self video
const myvid= document.createElement('video') ;
myvid.setAttribute("id", "myvideoloc") ; // giving id so that when user leave meeting, he can release media devices
myvid.muted=true ;





// Function to start the video meeting
function start_now() {
// setting up of self video stream by using audio and video devices of system
navigator.mediaDevices.getUserMedia({
    video:v ,
    audio:a
}).then(stream=>{
    num_users++ ; // increase the number of participants in video meeting
    myvidstr=stream ; // setting self video stream
    addvid(myvid,myvidstr) // adding own stream on page
})
socket.emit('joined-video', Room_id, myuserid, name) ; //To tell everyone in the room that user has joined video meet
}

// Function that will be called when user wants to join video meeting
function start_video_meeting() {

    alert("If you have joined video meeting in other room then please leave that to avoid any technical problem.") ;
    video_meet= true ; // setting that user is present in video meeting

    var x= document.getElementsByClassName("main__left") ;
    var y= document.getElementsByClassName("main__right") ;
    var c= document.getElementsByClassName("main__controls") ;

    x[0].style.flex= 0.8 ; y[0].style.flex=0.2 ; c[0].style.visibility= "visible" ;
    vidgrid.innerHTML='' ;  // This will delete all the elements present at the plae of videos
    start_now() ;  
}

function leave_video() {
    video_meet= false ;
    var i;
    // releasing the media devices when leaving meeting
    myvidstr.getTracks().forEach( (track) => {
        track.stop();
        });
    let k= document.getElementById("myvideoloc") ;
    k.srcObject= null ;
    // loop to close all the video user was attending
    for(i=0; i<mycalls.length; i++)
    {
        mycalls[i].close() ;
    }
    // Message to soccket to tell that user has left the video meeting
    socket.emit('user-discon-video',Room_id, myuserid, name) ;
    var x= document.getElementsByClassName("main__left") ;
    var y= document.getElementsByClassName("main__right") ;
    var c= document.getElementsByClassName("main__controls") ;

    x[0].style.flex= 0.2 ; y[0].style.flex=0.8 ; c[0].style.visibility= "hidden" ;
    vidgrid.innerHTML='' ;  // This will remove all the videos that were there

    // Now all the buttons that were deleted will be created again
    var but = document.createElement("button"); //Button to join video meeting
    but.innerHTML= "Join Video" ;
    but.setAttribute("id", "video_meet") ;
    but.setAttribute("onclick", "start_video_meeting()")
    var chat_leave = document.createElement("button"); // Button to leave chat room
    chat_leave.innerHTML= "Leave Room" ;
    chat_leave.setAttribute("id", "leave_chat") ;
    chat_leave.setAttribute("onclick", "leave()")
    var cop = document.createElement("button");  // Button to copy meeting invite link
    cop.innerHTML= "Copy Link" ;
    cop.setAttribute("id", "copy_button_old") ;
    cop.setAttribute("onclick", "copy()")
    var mail = document.createElement("button"); // Button to invite via mail
    mail.innerHTML= "Invite via Email" ;
    mail.setAttribute("id", "sendmail") ;
    mail.setAttribute("onclick", "sendEmail()")

    // Buttons will be again added to page
    vidgrid.append(but) ; 
    vidgrid.append(cop) ; 
    vidgrid.append(mail) ; 
    vidgrid.append(chat_leave) ;   
}

// Utility function to add video streams on page
const addvid= (video, stream) => {
    video.srcObject= stream ;
    video.addEventListener('loadedmetadata', ()=> {
    video.play() 
    })
    vidgrid.append(video) ; // video added to page
    adjust_videos() ; // Videos will be adjusted depending on number of users in meeting
}

// This file contains functions related to changing the appearance of elements on page

// to change the appearance of button after unmute operation
const setmutebut= () =>
{
    // To replace the icon
    const html = `
    <i class="fas fa-microphone"></i>
    <span>Mute</span>
  `
    document.querySelector('.mute_button').innerHTML = html;  //icon changed by this command
    var v= document.getElementById("mute_button") ;
    // To change the color of button after clicking
    v.style.color = "green" ;
}

// to change the appearance of button after mute operation
const setunmutebut= () =>
{
    // To replace the icon
    const html = `
    <i class="unmute fas fa-microphone-slash"></i>
    <span>Unmute</span>
  `
    document.querySelector('.mute_button').innerHTML = html;
    var v= document.getElementById("mute_button") ;
    v.style.color = "red" ;
}

// change appearance of Video button when camera turned off
const setoffbut= () =>
{
    // To replace the icon
    const html = `
    <i class="fas fa-video"></i>
    <span>Camera Off</span>
  `
    document.querySelector('.video_button').innerHTML = html;
    var v= document.getElementsByClassName("video_button") ;
    v[0].style.color = "red" ;
}

// change appearance of Video button when camera turned on
const setonbut= () =>
{
    // To replace the icon
    const html = `
  <i class="stop fas fa-video-slash"></i>
    <span>Camera On</span>
  `
  document.querySelector('.video_button').innerHTML = html; 
  var v= document.getElementsByClassName("video_button") ;
    v[0].style.color = "green" ;
}

// This function will notify that link to meeting has been copied by flashing a temporary green color on button
function change_copy_color(){
    var x= document.getElementById('copy_button') ;
    if(x.style.color=="green")
    x.style.color= "white" ;
    else
    x.style.color= "green"
}

// This function Will adjust the videos everytime someone joins or leave the meeting
function adjust_videos() {
    var vids= document.getElementsByTagName('video') ;
    var height , width , i ; // height and width of the video elements will be changed based on number of participants in video meeting
    // height and width will be in pixels (px)
    if(num_users>=9)
    {
        height= 180 ; width= 190 ;
    }
    else if(num_users>=5)
    {
        height= 200 ; width=230 ;
    }
    else if(num_users>=3)
    {
        height=300 ; width=400 ;
    }
    else
    {
        height=400 ; width=400 ;
    }
    // for loop will change style of every video element
    for(i=0; i<vids.length; i++)
    {
        vids[i].style.height=  height+'px' ;
        vids[i].style.width=  width+'px' ;
    }
}


// function to mute or unmute self audio parameter a with be changed 
const muteunmute= ()=> {
    const ena= myvidstr.getAudioTracks()[0].enabled ;  // checking the current condition
    if(ena){
        myvidstr.getAudioTracks()[0].enabled= false ; // mute if unmuted
        a=false ;
        setunmutebut() ; // changing the appearance of button after operation  (function present in change_appearance.js)
    }
    else{
        myvidstr.getAudioTracks()[0].enabled= true ;  // unmute if already muted
        a=true ;
        setmutebut() ; //changing the appearance of button after operation (function present in change_appearance.js)
    }
}

//function to stop or to show self video . video parameter v will be changed. 
const camoff= ()=> {
    const ena= myvidstr.getVideoTracks()[0].enabled ;  // checking the current condition
    if(ena){
        myvidstr.getVideoTracks()[0].enabled= false ;
        v=false ;
        setonbut() ; // changing the appearance of button after operation  (function present in change_appearance.js)
    }
    else{
        myvidstr.getVideoTracks()[0].enabled= true ;
        v=true ;
        setoffbut() ; // changing the appearance of button after operation  (function present in change_appearance.js)
    }
}

// function to copy the url address of meeting
function Copy(text){

var inputc = document.body.appendChild(document.createElement("input"));  //temporary create a element 
inputc.value = window.location.href;
inputc.focus();
inputc.select();
document.execCommand('copy'); // saving the location
inputc.parentNode.removeChild(inputc); // delete the temporary element
}

// This will b called when someone wants to leave room. It will redirect to home page.
const leave= ()=>{
    var confirm_result = confirm("Are you sure you want to leave? ");  // to confirm
        if (confirm_result == true) {
            socket.disconnect(userId,name) ;
            location.replace("https://vichill.herokuapp.com")  //sent to home page
        }
}

// function to send inviting email. email will be sent by user by using his default email. subject and content will be set by us.
function sendEmail() {

    var subject = "Inviting to chill out at ViChill";
    var emailBody = 'Hi %0D%0A' + 'I '+name+' invite you to come to our meeting by clicking '+ window.location.href 
    + ' %0D%0ANote : you can always start a new meeting by going to https://vichill.herokuapp.com' ;
    window.open("mailto:?subject="+subject+"&body="+emailBody) ;  // open email in another tab  
}


